#!/bin/python3

import math
import os
import random
import re
import sys
from collections import deque 

class Graph:
    def __init__(self, vertices, edges):
        self.vertices = vertices
        self.adj = {v:[] for v in vertices}
        self.compute_adj_matrix(edges)
        
    def compute_adj_matrix(self, edges):
        for from_vertex, to_vertex in edges:
            self.adj[from_vertex].append(to_vertex)
            self.adj[to_vertex].append(from_vertex)
            
    def connected_components(self):
        components = []
        visited = set()
        
        for v in self.vertices:
            if v not in visited:
                component = self.component_of(v)
                components.append(component)
                visited.union(component)
                visited = visited | component
        
        return components
    
    def component_of(self, v):
        component = set()
        
        stack = deque()
        stack.append(v)
        
        while len(stack):
            v = stack.pop()
            
            if v not in component:
                component.add(v)    
                
                neighbours = self.adj[v]
                stack.extend(neighbours)
        
        return component

#
# Complete the 'roadsAndLibraries' function below.
#
# The function is expected to return a LONG_INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER c_lib
#  3. INTEGER c_road
#  4. 2D_INTEGER_ARRAY cities
#

def roadsAndLibraries(n, c_lib, c_road, cities):
    if c_lib <= c_road:
        return n*c_lib
    
    graph = Graph(range(1, n+1), cities)
    
    components = graph.connected_components()
    roads = sum(map(lambda x: len(x)-1, components))

    return roads * c_road + c_lib*len(components)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        m = int(first_multiple_input[1])

        c_lib = int(first_multiple_input[2])

        c_road = int(first_multiple_input[3])

        cities = []

        for _ in range(m):
            cities.append(list(map(int, input().rstrip().split())))

        result = roadsAndLibraries(n, c_lib, c_road, cities)

        fptr.write(str(result) + '\n')

    fptr.close()
